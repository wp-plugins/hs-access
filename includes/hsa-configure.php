<?php
/*  
Copyright: © 2010 Haden Software <http://haden.cc/>

Released under the terms of the GNU General Public License. You should have received a copy of the
GNU General Public License, along with this software. In the main directory, see: /licensing/ 
If not, see: <http://www.gnu.org/licenses/>.
*/

/**************************************************************************************************/ 
/* WARNING: This is a system configuration file, please DO NOT EDIT this file directly!           */
/*      ... Instead, use the plugin options panel in WordPress to override these settings.        */
/**************************************************************************************************/

/**************************************************************************************************/
/* Direct access denial.                                                                          */
/**************************************************************************************** 0.1.0 ***/
if (realpath (__FILE__) === realpath ($_SERVER["SCRIPT_FILENAME"]))
	exit ("Do not access this file directly.");

/**************************************************************************************************/
/* Function to create and update the settings arrays in the $GLOBAL array.												*/
/*	Settings are checked for validity.  If a setting is invalid, or missing, it is set to the 		*/
/*	default value.																																								*/
/*	INPUT: pv_options !== false - Use the options supplied and check for validity.								*/
/*																This must be in the format of $GLOBALS['_HSACCESS_']['opt']			*/
/*										=== false - Load settings from DB																						*/	
/*	INPUT: pv_users   !== false - Use the settings supplied and check for validity.								*/
/*																This must be in the format of $GLOBALS['_HSACCESS_']['usr']			*/
/*										=== false - Load settings from DB																						*/	
/**************************************************************************************** 0.1.0 ***/
if (!function_exists ("hsaccess_configure_defaults")) {
	function hsaccess_configure_defaults($pv_options = false,$pv_users = false) {
		// This array must contain all the options, even if only initialised to ''.  If it is not in the 
		//	defaults, it will be discarded.
	  $lv_opt_def = apply_filters('hsaccess_default_options',array('options_version'  => '1.0',
	  																														 'control_plugins'  => '',
                                                                 'plugins_style'    => 'classic'));
		// This array must contain all the settings per user, even if only initialised to ''.  If it is 
		//	not in the defaults, it will be discarded.
	  $lv_usr_def = apply_filters('hsaccess_default_user',array('plugins' => ''));
	  // Merge options. Supplied options will overwrite the default values as applicable
	  $lv_options = array_merge($lv_opt_def,(($pv_options !== false) ? 
	                                                  			 	(array)$pv_options : 
	                                                  				(array)get_site_option("hsaccess_options")));
	  // Validate each option, possibly reverting back to the default value if invalid.
	  if (isset($GLOBALS['_HSACCESS_']['opt']))
	  	unset($GLOBALS['_HSACCESS_']['opt']);
	  foreach ($lv_options as $lv_key => &$lv_value) {
	  	if (isset($lv_opt_def[$lv_key])) {
		    if (!is_array($lv_value))
	  	    $lv_value = trim (stripslashes ($lv_value));
	    	else // A string, or an array of strings.
	      	foreach ($lv_value as $k => $v)
	        	$lv_value[$k] = trim(stripslashes($v));
				$GLOBALS["_HSACCESS_"]["opt"][$lv_key] = $lv_value;        	
		    if ($lv_key === "options_version" && (!is_string ($lv_value) || !is_numeric ($lv_value)))
		      $GLOBALS["_HSACCESS_"]["opt"][$lv_key] = $lv_opt_def[$lv_key];
		    else if ($lv_key === "control_plugins" && ($lv_value != 'on' && $lv_value != 'off'))
		      $GLOBALS["_HSACCESS_"]["opt"][$lv_key] = $lv_opt_def[$lv_key];
	    }
	  }
	  // Process user settings per user
	 	$lv_user_search = new WP_User_Search('','','');
		$lv_users_ids = $lv_user_search->get_results();
		foreach ($lv_users_ids as $lv_id) {
		  // Merge user settings. Supplied options will overwrite the default values as applicable
		  $lv_user = array_merge($lv_usr_def,((($pv_users !== false) && isset($pv_users[$lv_id]))
																						? (array)$pv_users[$lv_id] 
																						: (array)get_user_meta($lv_id,'hsaccess_settings',true)));
	  	// Validate each option, possibly reverting back to the default value if invalid.
	  	if (isset($GLOBALS['_HSACCESS_']['usr'][$lv_id]))
	  		unset($GLOBALS['_HSACCESS_']['usr'][$lv_id]);
	  	foreach ($lv_user as $lv_key => &$lv_value) {
	  		if (isset($lv_usr_def[$lv_key])) {
		    	if (!is_array($lv_value))
	  	    	$lv_value = trim (stripslashes ($lv_value));
	    		else // A string, or an array of strings.
	      		foreach ($lv_value as $k => $v)
	        		$lv_value[$k] = trim(stripslashes($v));
					$GLOBALS['_HSACCESS_']['usr'][$lv_id][$lv_key] = $lv_value;        	
		    	if ($lv_key === 'plugins' && ($lv_value == '-- None --'))
		      	$GLOBALS['_HSACCESS_']['usr'][$lv_id][$lv_key] = $lv_usr_def[$lv_key];
	    	}
	  	}
	  }
	} // end of hsaccess_configure_defaults()
}

/**************************************************************************************************/
/* Function to load the options and user settings to the GLOBAL variable													*/
/*	add_action("admin_init",...)																																	*/
/**************************************************************************************** 0.1.0 ***/
if (!function_exists ("hsaccess_configure_init")) {
  function hsaccess_configure_init() {
  	hsaccess_configure_defaults();
	} // end of function hsaccess_configure_init()
}

/**************************************************************************************************/
/* Function to remove HS Access settings from the database when the plugin is deacitvated/removed */
/*	register_deactivation_hook(...)                                                               */
/**************************************************************************************** 0.1.0 ***/
if (!function_exists ("hsaccess_configure_deactivate")) {
  function hsaccess_configure_deactivate() {
    delete_site_option("hsaccess_options");
    delete_metadata('user',0,'hsaccess_settings','',true);
	} // end of function hsaccess_configure_deactivate()
}

?>